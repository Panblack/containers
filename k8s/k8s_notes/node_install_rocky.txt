
## nodes
``
192.168.1.131 k8s-rocky001.lab.example.com      k8s-rocky001
192.168.1.132 k8s-rocky002.lab.example.com      k8s-rocky002
192.168.1.133 k8s-rocky003.lab.example.com      k8s-rocky003
192.168.1.134 k8s-rocky004.lab.example.com      k8s-rocky004

```

## Config template VM
```
#sudo
##rocky8:
echo "rocky  ALL=(ALL) NOPASSWD:ALL" | sudo tee -a /etc/sudoers.d/rocky

#sysctl
cat << eof | sudo tee /etc/sysctl.d/20-k8s.conf
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
vm.swappiness = 0
eof

sudo sysctl --system

#kernel modules
##rocky8:
echo -e 'overlay\nbr_netfilter' | sudo tee /etc/modules-load.d/k8s.conf

sudo modprobe overlay
sudo modprobe br_netfilter
	$ lsmod |grep -E 'overlay|netfilter'
	br_netfilter           24576  0
	bridge                278528  1 br_netfilter
	overlay               139264  0


#swapoff
sudo swapoff -a
sudo cp -p /etc/fstab /etc/fstab.bak

##rocky8: disable swap and remove swap lv
sudo lvremove /dev/rl/swap
sudo lvextend -r -l +100%FREE /dev/rl/root
sudo cp /etc/sysconfig/grub ./etc_sysconfig_grub
sudo vi /etc/sysconfig/grub
	$ sudo diff ./etc_sysconfig_grub /etc/sysconfig/grub
	6c6
	< GRUB_CMDLINE_LINUX="resume=/dev/mapper/rl-swap rd.lvm.lv=rl/root rd.lvm.lv=rl/swap"
	---
	> GRUB_CMDLINE_LINUX="rd.lvm.lv=rl/root"
sudo grub2-mkconfig --output=/boot/grub2/grub.cfg
sudo reboot


#rocky8: turn off selinux
sudo sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/sysconfig/selinux

#static ip
##rocky8:
$ cat /etc/sysconfig/network-scripts/ifcfg-enp0s3
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
DEFROUTE=yes
IPV4_FAILURE_FATAL=no
IPV6INIT=yes
IPV6_AUTOCONF=yes
IPV6_DEFROUTE=yes
IPV6_FAILURE_FATAL=no
NAME=enp0s3
UUID=a83d333b-7237-488a-ae8e-970fe0fa9b97
DEVICE=enp0s3
ONBOOT=yes
IPADDR=192.168.1.131
NETMASK=255.255.255.0
GATEWAY=192.168.1.1
DNS1=192.168.1.1


#install containerd
sudo yum install -y yum-utils
sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
sudo yum install containerd.io

#install kube*
##rocky8:
cat << eof | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg
eof
sudo dnf install epel-release dnf-utils iproute-tc vim wget zip sysstat -y
sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
sudo dnf makecache
sudo dnf install kubeadm-1.24.2-0 kubectl-1.24.2-0 kubelet-1.24.2-0
echo -e "source <(kubeadm completion bash)\nsource <(kubectl completion bash)\nsource <(crictl completion bash)" >> ~/.bashrc


#containerd config
sudo mkdir /etc/containerd
sudo containerd config default > containerd.default.config.toml
sudo cp -p /etc/containerd/config.toml containerd.config.toml.rpm
sudo cp containerd.default.config.toml /etc/containerd/config.toml
sudo vim /etc/containerd/config.toml

	##rocky8:
	$ sudo diff /etc/containerd/config.toml containerd.default.config.toml
	61c61
	<     sandbox_image = "registry.aliyuncs.com/google_containers/pause:3.6"
	---
	>     sandbox_image = "k8s.gcr.io/pause:3.6"
	125c125
	<             SystemdCgroup = true
	---
	>             SystemdCgroup = false
	154,157d153
	<        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."docker.io"]
	<          endpoint = ["https://<your_accelerator>.mirror.aliyuncs.com"]
	<        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."k8s.gcr.io"]
	<          endpoint = ["https://registry.aliyuncs.com/google_containers"]
        <        [plugins."io.containerd.grpc.v1.cri".registry.mirrors."quay.io"]
        <          endpoint = ["https://quay.azk8s.cn"]

#rocky8:
sudo systemctl restart containerd
sudo systemctl enalbe containerd
sudo systemctl enable kubelet
sudo systemctl disable firewalld

#configure crictl
sudo crictl config --set runtime-endpoint=unix://var/run/containerd/containerd.sock --set image-endpoint=unix://var/run/containerd/containerd.sock
	$ cat /etc/cir
	cat: /etc/cir: No such file or directory
	[rocky@k8s-rocky001 ~]$ cat /etc/crictl.yaml
	runtime-endpoint: "unix://var/run/containerd/containerd.sock"
	image-endpoint: "unix://var/run/containerd/containerd.sock"
	timeout: 0
	debug: false
	pull-image-on-create: false
	disable-pull-on-run: false

sudo reboot
```


## Clone VMs
```
##rocky8:
sudo hostnamectl set-hostname k8s-rocky002.lab.example.com
sudo sed -i 's/192.168.1.131/192.168.1.132/g' /etc/sysconfig/network-scripts/ifcfg-enp0s3
sudo init 6
sudo hostnamectl set-hostname k8s-rocky003.lab.example.com
sudo sed -i 's/192.168.1.131/192.168.1.133/g' /etc/sysconfig/network-scripts/ifcfg-enp0s3
sudo init 6

```

## Install cluster
```
#rocky8: cluster install error!
$ sudo kubeadm init --dry-run --cri-socket=/var/run/containerd/containerd.sock
$ sudo kubeadm init --cri-socket=/var/run/containerd/containerd.sock
W0712 23:31:26.345725    1221 initconfiguration.go:120] Usage of CRI endpoints without URL scheme is deprecated and can cause kubelet errors in the future. Automatically prepending scheme "unix" to the "criSocket" with value "/var/run/containerd/containerd.sock". Please update your configuration!
[init] Using Kubernetes version: v1.24.2
[preflight] Running pre-flight checks
        [WARNING Firewalld]: firewalld is active, please ensure ports [6443 10250] are open or your cluster may not function correctly
        [WARNING FileExisting-tc]: tc not found in system path
        [WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'
error execution phase preflight: [preflight] Some fatal errors occurred:
        [ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`
To see the stack trace of this error execute with --v=5 or higher
#fix:
#sudo dnf install iproute-tc
#sudo systemctl enable kubelet.service
#sudo systemctl disable firewalld
#--cri-socket=unix://var/run/containerd/containerd.sock

$ sudo kubeadm init --cri-socket=unix://var/run/containerd/containerd.sock
[init] Using Kubernetes version: v1.24.2
[preflight] Running pre-flight checks
error execution phase preflight: [preflight] Some fatal errors occurred:
        [ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist
[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`
To see the stack trace of this error execute with --v=5 or higher

$ ls -l /proc/sys/net/bridge/
ls: cannot access '/proc/sys/net/bridge/': No such file or directory
#fix:
#sudo mv /etc/modules /etc/modules-load.d/k8s.conf

sudo kubeadm config images pull --image-repository=registry.aliyuncs.com/google_containers

	$ sudo kubeadm config images pull --image-repository=registry.aliyuncs.com/google_containers
	[config/images] Pulled registry.aliyuncs.com/google_containers/kube-apiserver:v1.24.2
	[config/images] Pulled registry.aliyuncs.com/google_containers/kube-controller-manager:v1.24.2
	[config/images] Pulled registry.aliyuncs.com/google_containers/kube-scheduler:v1.24.2
	[config/images] Pulled registry.aliyuncs.com/google_containers/kube-proxy:v1.24.2
	[config/images] Pulled registry.aliyuncs.com/google_containers/pause:3.7
	[config/images] Pulled registry.aliyuncs.com/google_containers/etcd:3.5.3-0
	[config/images] Pulled registry.aliyuncs.com/google_containers/coredns:v1.8.6

sudo kubeadm init --kubernetes-version=v1.24.2 --image-repository=registry.aliyuncs.com/google_containers

	$ sudo kubeadm init --kubernetes-version=v1.24.2 --image-repository=registry.aliyuncs.com/google_containers
	[init] Using Kubernetes version: v1.24.2
	[preflight] Running pre-flight checks
	[preflight] Pulling images required for setting up a Kubernetes cluster
	[preflight] This might take a minute or two, depending on the speed of your internet connection
	[preflight] You can also perform this action in beforehand using 'kubeadm config images pull'
	[certs] Using certificateDir folder "/etc/kubernetes/pki"
	[certs] Generating "ca" certificate and key
	[certs] Generating "apiserver" certificate and key
	[certs] apiserver serving cert is signed for DNS names [k8s-rocky001.lab.example.com kubernetes kubernetes.default kubernetes.default.svc kubernetes.default.svc.cluster.local] and IPs [10.96.0.1 192.168.1.131]
	[certs] Generating "apiserver-kubelet-client" certificate and key
	[certs] Generating "front-proxy-ca" certificate and key
	[certs] Generating "front-proxy-client" certificate and key
	[certs] Generating "etcd/ca" certificate and key
	[certs] Generating "etcd/server" certificate and key
	[certs] etcd/server serving cert is signed for DNS names [k8s-rocky001.lab.example.com localhost] and IPs [192.168.1.131 127.0.0.1 ::1]
	[certs] Generating "etcd/peer" certificate and key
	[certs] etcd/peer serving cert is signed for DNS names [k8s-rocky001.lab.example.com localhost] and IPs [192.168.1.131 127.0.0.1 ::1]
	[certs] Generating "etcd/healthcheck-client" certificate and key
	[certs] Generating "apiserver-etcd-client" certificate and key
	[certs] Generating "sa" key and public key
	[kubeconfig] Using kubeconfig folder "/etc/kubernetes"
	[kubeconfig] Writing "admin.conf" kubeconfig file
	[kubeconfig] Writing "kubelet.conf" kubeconfig file
	[kubeconfig] Writing "controller-manager.conf" kubeconfig file
	[kubeconfig] Writing "scheduler.conf" kubeconfig file
	[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"
	[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"
	[kubelet-start] Starting the kubelet
	[control-plane] Using manifest folder "/etc/kubernetes/manifests"
	[control-plane] Creating static Pod manifest for "kube-apiserver"
	[control-plane] Creating static Pod manifest for "kube-controller-manager"
	[control-plane] Creating static Pod manifest for "kube-scheduler"
	[etcd] Creating static Pod manifest for local etcd in "/etc/kubernetes/manifests"
	[wait-control-plane] Waiting for the kubelet to boot up the control plane as static Pods from directory "/etc/kubernetes/manifests". This can take up to 4m0s
	[apiclient] All control plane components are healthy after 9.504531 seconds
	[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace
	[kubelet] Creating a ConfigMap "kubelet-config" in namespace kube-system with the configuration for the kubelets in the cluster
	[upload-certs] Skipping phase. Please see --upload-certs
	[mark-control-plane] Marking the node k8s-rocky001.lab.example.com as control-plane by adding the labels: [node-role.kubernetes.io/control-plane node.kubernetes.io/exclude-from-external-load-balancers]
	[mark-control-plane] Marking the node k8s-rocky001.lab.example.com as control-plane by adding the taints [node-role.kubernetes.io/master:NoSchedule node-role.kubernetes.io/control-plane:NoSchedule]
	[bootstrap-token] Using token: 0cmooj.unu290wgetsxdzmk
	[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles
	[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to get nodes
	[bootstrap-token] Configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials
	[bootstrap-token] Configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token
	[bootstrap-token] Configured RBAC rules to allow certificate rotation for all node client certificates in the cluster
	[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace
	[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key
	[addons] Applied essential addon: CoreDNS
	[addons] Applied essential addon: kube-proxy
	
	Your Kubernetes control-plane has initialized successfully!
	
	To start using your cluster, you need to run the following as a regular user:
	
	  mkdir -p $HOME/.kube
	  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
	  sudo chown $(id -u):$(id -g) $HOME/.kube/config
	
	Alternatively, if you are the root user, you can run:
	
	  export KUBECONFIG=/etc/kubernetes/admin.conf
	
	You should now deploy a pod network to the cluster.
	Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
	  https://kubernetes.io/docs/concepts/cluster-administration/addons/
	
	Then you can join any number of worker nodes by running the following on each as root:
	
	kubeadm join 192.168.1.131:6443 --token 0cmooj.unu290wgetsxdzmk \
	        --discovery-token-ca-cert-hash sha256:e147d7069e36ac8e2fbad441d26da352867f7a6ddef4bb9da28586da77826ae5


```


## Add nodes
```
sudo kubeadm join 192.168.1.131:6443 --token 0cmooj.unu290wgetsxdzmk \
                --discovery-token-ca-cert-hash sha256:e147d7069e36ac8e2fbad441d26da352867f7a6ddef4bb9da28586da77826ae5
```


## cni(calico)
```
wget  https://docs.projectcalico.org/manifests/calico.yaml
grep image.*calico calico.yaml
          image: docker.io/calico/cni:v3.23.1
          image: docker.io/calico/cni:v3.23.1
          image: docker.io/calico/node:v3.23.1
          image: docker.io/calico/kube-controllers:v3.23.1
kubectl apply -f calico.yaml

```





