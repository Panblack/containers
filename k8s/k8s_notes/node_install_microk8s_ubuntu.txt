
# MicroK8S install
## user and network
ubuntu@ubuntu2204:~$ sudo cat /etc/sudoers.d/ubuntu
ubuntu ALL = (ALL) NOPASSWD: ALL

sudo hostnamectl set-hostname microk8s001.lab.example.com

ubuntu@microk8s001:~$ sudo cp -p /etc/netplan/00-installer-config.yaml ~/
ubuntu@microk8s001:~$ sudo cat ~/00-installer-config.yaml
# This is the network config written by 'subiquity'
network:
  ethernets:
    enp0s3:
      addresses:
      - 192.168.1.161/24
      routes:
      - to: default
        via: 192.168.1.1
      nameservers:
        addresses:
        - 192.168.1.1
        search:
        - lab.example.com
  version: 2
ubuntu@microk8s001:~$ cat /etc/netplan/00-installer-config.yaml
network:
  version: 2
  ethernets:
    enp0s3:
      dhcp4: true
      nameservers:
        search:
        - lab.example.com
ubuntu@microk8s001:~$ cat /etc/hosts
127.0.0.1 localhost
192.168.1.161 microk8s001.lab.example.com microk8s001
192.168.1.162 microk8s002.lab.example.com microk8s002
192.168.1.163 microk8s003.lab.example.com microk8s003
192.168.1.164 microk8s004.lab.example.com microk8s004
192.168.1.165 microk8s005.lab.example.com microk8s005
192.168.1.166 microk8s006.lab.example.com microk8s006
192.168.1.161 microk8s-registry.lab.example.com

## environment
~/.bashrc
force_color_prompt=yes
PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\][\u@\h\[\033[00m\]:\[\033[01;34m\] `date +%FT%T` \w\[\033[00m\]]\n\$ '

~/.vimrc
nnoremap q :q
nnoremap Q :q!
autocmd Filetype yaml setlocal ai ts=2 sw=2 et
set paste
set nosi
set hlsearch

ssh-keygen -t rsa
ssh-copy-id ubuntu@microk8s001

$ cat ~/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDCzf6TpX8l7lf4dk81W0b4JbM4O9RhaZ/soZUe+XQP4CEF9DWQqknSp4VDXpGZ5K//nlT2Xp441zJD4YKBhEIIW598lQ8UUaOdZGdeReNXPEJQtzw+VIh8ETbsKF1r6Q+uueq77V5bt70uw0iRIX+7i4H/4UEiBC8ZcTsqP6Dx5aOrkHsJEQPzN+sT4ydHxv8MQ0KUUGAjtOeyPXE813bt4AtddixD4ACp3gqKbHk2snXrkXA5iC29p76WqUGq3IILdcif03v1Rf+abgBTjGB8UdhRLbDR9A4NPbf0XVkRv/M4t34jtoOgOLoaP5nnk4m3OpSt46PGfBGNa70lz0mv xuw@x230i
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDa2XiUv5/+ZHTA+ypDxe0BVlHMN2NyVBltfzRxPYttemNkWcOKSoCRQyMZkbUQfNwKJwUb0aeQ9Deyiw7RY4MMcwemmTSpzbEv/vzW+76ICzYSK0zbdoIdkv/QcpNihROa8itKD2KdMfUkBl8K/fpNBHYRL5GFWWNTbX63NTy5r2rNRodqO+7LRG+2OtLnI9Kd4meVI3/jmLhPuz16oTdgxWKCNhlVtCyz+HlE5CRiTFSqjiW4lYzchDIHV7NzOnvFoz4fcXkQw+S9TvoRwCT1MlYO/kEuuZN2LL0TpZZsYVfEv4DdZRtGAK2c/rp0/rX0+C9mXahrT6GxvpcZrhkD6RIyJS+Mrg2TtDrNxK4PbCdkxP8vovxRvgcCO31sixsIyuEmLMS9JRc6hHbLdGraa9BZ56UmTKyS7kKHrGlTADU4TTT7M3TdwlJ8QErS3blB+ca+aZtQlf3/52lOSm6IXm2ikUxmIONqYUX7yp6oyE+bA1sxFZPf4EkicJ2GPEc= ubuntu@microk8s001.lab.example.com

$ cat ~/bin/down-all.sh
#!/bin/bash
for x in `seq 2 6 `; do
  ssh -o ConnectTimeout=1 ubuntu@192.168.1.16$x "sudo init 0"
done
sleep 2
sudo init 0

sudo timedatectl set-timezone Asia/Shanghai

## packages
sudo apt-get update; sudo apt-get upgrade
sudo snap install --channel=1.24 microk8s --classic
sudo snap alias microk8s.kubectl kubectl
sudo snap alias microk8s.helm helm
sudo snap alias microk8s.ctr ctr
mkdir ~/.kube
echo 'source <(kubectl completion bash)' >> .profile

sudo apt-get install jq pssh -y 
sudo ln -s /usr/bin/parallel-ssh /usr/bin/pssh

mkdir yq; cd yq
wget https://github.com/mikefarah/yq/releases/download/v4.27.5/yq_linux_amd64.tar.gz
tar zxf yq_linux_amd64.tar.gz
sudo mv yq_linux_amd64 /usr/local/bin/yq
sudo ./install-man-page.sh
cd ..; rm yq -rf

## aws ca
$ cat /usr/local/share/ca-certificates/cfssl_ca_aws.crt
-----BEGIN CERTIFICATE-----
MIIDujCCAqKgAwIBAgIUaPURoFxLcsO0acYbGYqf0aTLKAYwDQYJKoZIhvcNAQEL
BQAwdTELMAkGA1UEBhMCQ04xEDAOBgNVBAgTB0JlaUppbmcxEDAOBgNVBAcTB0Jl
aUppbmcxDDAKBgNVBAoTA2s4czEPMA0GA1UECxMGU3lzdGVtMSMwIQYDVQQDExpz
ZWxmLmNvbXB1dGUuYW1hem9uYXdzLmNvbTAeFw0yMjA5MDMwNzU4MDBaFw0zMjA4
MzEwNzU4MDBaMHUxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlKaW5nMRAwDgYD
VQQHEwdCZWlKaW5nMQwwCgYDVQQKEwNrOHMxDzANBgNVBAsTBlN5c3RlbTEjMCEG
A1UEAxMac2VsZi5jb21wdXRlLmFtYXpvbmF3cy5jb20wggEiMA0GCSqGSIb3DQEB
AQUAA4IBDwAwggEKAoIBAQDGGQRDzZmd2eqYhyBnqBCJq+zKMrkpnEOY93eXsfIG
ok85bDRRhNnTixSZh20GbtTZf9LWnytcBWV3dJ6/KrX9HyUPpiGds+OzpxPtoLKB
3/axq9hf+KiwHqr0ZcZs4Z9dkenfJFH3KO9VHhOLqYWBrlkAjcXXNlKqp+GxCGsr
gyq+FS9p2DorftMskUggERL0aXyrZfPTZ+ksjL2Pt6d9GVml2u9i8fYQ1JXq01dz
l1Q4hj99xpGn7l/GXqxbshEkfMij44lC7NOZt2qRpcv8wKX+SVoT3VhxDylfqHzf
fe9vFCYrNEku1uLR/mkPSvXPxJ+/xjMDM3hQzJu5h7XbAgMBAAGjQjBAMA4GA1Ud
DwEB/wQEAwIBBjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRkXlicQyk6NqOb
rP76q1I1iGUGpTANBgkqhkiG9w0BAQsFAAOCAQEAil+iwh0pDJi4Yba2T26geP/J
eMqTyKLh/DLORH4O7TAWSBr/ySU1LFCQL/rPsO7WLXfEWmq9dr8Hl4YgktNLJ9PY
iBAeUaBqqf+XYOCg7AXYfyHAnYkY5PZbMW4tqS3k93jEH3XJxo4gJuuycp+Vd6Nw
6CKi2yF1VflYdbYU9RmU5vrbVFwErjHGsgktrkZkpFs4KrrQYpSWLq3n9wQZ15tN
vJOkwnd/YYnnvQ/k94uz4ni9HwFw9nlD0cssuRgNBeZK6fJeQg4kFfhM3UGHi1yW
Mfj1HpCpoZl/NHW7ds7U+1SKOq2rslTpkCdRqEgVf5NoDYhcCYU9xPntQkqvYg==
-----END CERTIFICATE-----

$ sudo update-ca-certificates

$ ll /etc/ssl/certs/ |grep aws
lrwxrwxrwx 1 root root     16 Sep 18 11:50 c8cfc938.0 -> cfssl_ca_aws.pem
lrwxrwxrwx 1 root root     49 Sep 18 11:50 cfssl_ca_aws.pem -> /usr/local/share/ca-certificates/cfssl_ca_aws.crt



## configure
$ 
$ sudo microk8s enable helm3 dns hostpath-storage ingress metallb metrics-server


$ sudo microk8s enable helm3 dns hostpath-storage ingress metallb metrics-server
Helm 3 is enabled
DNS is enabled

Enabling default storage class.
WARNING: Hostpath storage is not suitable for production environments.
deployment.apps/hostpath-provisioner created
Storage will be available soon.

Enabling Ingress
Ingress is enabled

Enabling MetalLB
Enter each IP address range delimited by comma (e.g. '10.64.140.43-10.64.140.49,192.168.0.105-192.168.0.111'): 192.168.14.170-192.168.1.179
Warning: policy/v1beta1 PodSecurityPolicy is deprecated in v1.21+, unavailable in v1.25+
Warning: spec.template.spec.nodeSelector[beta.kubernetes.io/os]: deprecated since v1.14; use "kubernetes.io/os" instead
MetalLB is enabled

Enabling Metrics-Server
Metrics-Server is enabled

### adding nodes
[ubuntu@microk8s001: 2022-09-19T14:50:11 ~]$ microk8s add-node
[ubuntu@microk8s002: 2022-09-19T14:50:47 ~]$ microk8s join 192.168.1.161:25000/xxxxxxx
...

[ubuntu@microk8s001: 2022-09-19T14:55:11 ~]$ microk8s add-node
[ubuntu@microk8s004: 2022-09-19T14:55:35 ~]$ microk8s join 192.168.1.161:25000/fdded79b688b33b056941972820d4ce7/903ec0a4aea7 --worker
Contacting cluster at 192.168.1.161

The node has joined the cluster and will appear in the nodes list in a few seconds.

Currently this worker node is configured with the following kubernetes API server endpoints:
    - 192.168.1.161 and port 16443, this is the cluster node contacted during the join operation.
    - 192.168.1.162 assuming port 16443
    - 192.168.1.163 assuming port 16443

If the above endpoints are incorrect, incomplete or if the API servers are behind a loadbalancer please update
/var/snap/microk8s/current/args/traefik/provider.yaml


[ubuntu@microk8s001: 2022-09-19T15:00:53 ~]
$ microk8s status
microk8s is running
high-availability: yes
  datastore master nodes: 192.168.1.161:19001 192.168.1.162:19001 192.168.1.163:19001
  datastore standby nodes: none
addons:
  enabled:
    dns                  # (core) CoreDNS
    ha-cluster           # (core) Configure high availability on the current node
    helm3                # (core) Helm 3 - Kubernetes package manager
    hostpath-storage     # (core) Storage class; allocates storage from host directory
    ingress              # (core) Ingress controller for external access
    metallb              # (core) Loadbalancer for your Kubernetes cluster
    metrics-server       # (core) K8s Metrics Server for API access to service metrics
    storage              # (core) Alias to hostpath-storage add-on, deprecated
  disabled:
    community            # (core) The community addons repository
    dashboard            # (core) The Kubernetes dashboard
    gpu                  # (core) Automatic enablement of Nvidia CUDA
    helm                 # (core) Helm 2 - the package manager for Kubernetes
    host-access          # (core) Allow Pods connecting to Host services smoothly
    mayastor             # (core) OpenEBS MayaStor
    prometheus           # (core) Prometheus operator for monitoring and logging
    rbac                 # (core) Role-Based Access Control for authorisation
    registry             # (core) Private image registry exposed on localhost:32000
[ubuntu@microk8s001: 2022-09-19T15:01:09 ~]
$ kubectl get nodes -o wide
NAME                          STATUS   ROLES    AGE     VERSION                    INTERNAL-IP     EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION      CONTAINER-RUNTIME
microk8s001.lab.example.com   Ready    <none>   20h     v1.24.4-2+2f38f78fa07274   192.168.1.161   <none>        Ubuntu 22.04.1 LTS   5.15.0-47-generic   containerd://1.5.13
microk8s003.lab.example.com   Ready    <none>   4m29s   v1.24.4-2+2f38f78fa07274   192.168.1.163   <none>        Ubuntu 22.04.1 LTS   5.15.0-47-generic   containerd://1.5.13
microk8s004.lab.example.com   Ready    <none>   3m37s   v1.24.4-2+2f38f78fa07274   192.168.1.164   <none>        Ubuntu 22.04.1 LTS   5.15.0-47-generic   containerd://1.5.13
microk8s005.lab.example.com   Ready    <none>   108s    v1.24.4-2+2f38f78fa07274   192.168.1.165   <none>        Ubuntu 22.04.1 LTS   5.15.0-47-generic   containerd://1.5.13
microk8s002.lab.example.com   Ready    <none>   6m51s   v1.24.4-2+2f38f78fa07274   192.168.1.162   <none>        Ubuntu 22.04.1 LTS   5.15.0-47-generic   containerd://1.5.13


### prometheus
$ microk8s enable prometheus
Infer repository core for addon prometheus
Adding argument --authentication-token-webhook to nodes.
Configuring node 192.168.1.163
Configuring node 192.168.1.164
Configuring node 192.168.1.165
Configuring node 192.168.1.162
Restarting nodes.
Configuring node 192.168.1.163
Configuring node 192.168.1.164
Configuring node 192.168.1.165
Configuring node 192.168.1.162
Infer repository core for addon dns
Addon core/dns is already enabled
Fetching kube-prometheus version v0.8.0.
...
alertmanager.monitoring.coreos.com/main created
Warning: policy/v1beta1 PodDisruptionBudget is deprecated in v1.21+, unavailable in v1.25+; use policy/v1 PodDisruptionBudget
...
configmap/grafana-dashboards created
Warning: spec.template.spec.nodeSelector[beta.kubernetes.io/os]: deprecated since v1.14; use "kubernetes.io/os" instead
...
service/prometheus-k8s created
serviceaccount/prometheus-k8s created
servicemonitor.monitoring.coreos.com/prometheus-k8s created
The Prometheus operator is enabled (user/pass: admin/admin)

[ubuntu@microk8s001: 2022-09-19T15:24:02 ~]
$ kubectl get pods -n monitoring -o wide
NAME                                   READY   STATUS    RESTARTS        AGE     IP              NODE                          NOMINATED NODE   READINESS GATES
prometheus-adapter-85455b9f55-xcrns    1/1     Running   0               8m11s   10.1.37.130     microk8s002.lab.example.com   <none>           <none>
node-exporter-8z6l4                    2/2     Running   0               8m11s   192.168.1.161   microk8s001.lab.example.com   <none>           <none>
prometheus-adapter-85455b9f55-r22np    1/1     Running   0               8m11s   10.1.3.130      microk8s005.lab.example.com   <none>           <none>
node-exporter-kx2mb                    2/2     Running   0               8m11s   192.168.1.165   microk8s005.lab.example.com   <none>           <none>
node-exporter-x8qr9                    2/2     Running   0               8m11s   192.168.1.164   microk8s004.lab.example.com   <none>           <none>
prometheus-operator-65cdb77c59-dr76z   2/2     Running   0               8m11s   10.1.44.66      microk8s004.lab.example.com   <none>           <none>
node-exporter-7wx28                    2/2     Running   0               8m11s   192.168.1.162   microk8s002.lab.example.com   <none>           <none>
node-exporter-f9gtj                    2/2     Running   0               8m11s   192.168.1.163   microk8s003.lab.example.com   <none>           <none>
kube-state-metrics-55b87f58f6-htbbn    3/3     Running   0               8m11s   10.1.37.131     microk8s002.lab.example.com   <none>           <none>
prometheus-k8s-0                       2/2     Running   1 (5m32s ago)   7m9s    10.1.44.67      microk8s004.lab.example.com   <none>           <none>
grafana-789464df6b-kb6wn               1/1     Running   0               8m11s   10.1.124.2      microk8s003.lab.example.com   <none>           <none>
blackbox-exporter-84c68b59b8-nt5mf     3/3     Running   0               8m11s   10.1.37.132     microk8s002.lab.example.com   <none>           <none>
alertmanager-main-0                    2/2     Running   0               7m9s    10.1.124.3      microk8s003.lab.example.com   <none>           <none>

$ kubectl get svc -n monitoring
NAME                    TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)                      AGE
prometheus-operator     ClusterIP   None             <none>        8443/TCP                     9m50s
alertmanager-main       ClusterIP   10.152.183.235   <none>        9093/TCP                     9m33s
blackbox-exporter       ClusterIP   10.152.183.230   <none>        9115/TCP,19115/TCP           9m33s
grafana                 ClusterIP   10.152.183.78    <none>        3000/TCP                     9m32s
kube-state-metrics      ClusterIP   None             <none>        8443/TCP,9443/TCP            9m32s
node-exporter           ClusterIP   None             <none>        9100/TCP                     9m31s
prometheus-adapter      ClusterIP   10.152.183.41    <none>        443/TCP                      9m31s
prometheus-k8s          ClusterIP   10.152.183.133   <none>        9090/TCP                     9m31s
alertmanager-operated   ClusterIP   None             <none>        9093/TCP,9094/TCP,9094/UDP   7m55s
prometheus-operated     ClusterIP   None             <none>        9090/TCP                     7m55s




